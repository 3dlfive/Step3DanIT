"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e6) { throw _e6; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e7) { didErr = true; err = _e7; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(function () {
  "use strict";

  var e = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_e) {
      var t,
          s,
          a,
          _args = arguments;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              t = _args.length > 1 && _args[1] !== undefined ? _args[1] : "";
              s = _args.length > 2 && _args[2] !== undefined ? _args[2] : "GET";
              a = _args.length > 3 ? _args[3] : undefined;
              _context.next = 5;
              return fetch("".concat(_e).concat(t), _objectSpread({
                method: s
              }, a)).then(function (e) {
                return e.ok ? "/login" === t ? e.text() : "DELETE" === s ? e : e.json() : new Error("Something goes wrong");
              });

            case 5:
              return _context.abrupt("return", _context.sent);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function e(_x) {
      return _ref.apply(this, arguments);
    };
  }();

  var t = /*#__PURE__*/function () {
    function t(e, _t) {
      _classCallCheck(this, t);

      this.btnDelete = document.createElement("button"), this.btnEdit = document.createElement("button"), this.btnMore = document.createElement("button"), this.cardBody = document.createElement("div"), this.visit = e, this.id = e.id, this.cardsInfo = [];
    }

    _createClass(t, [{
      key: "render",
      value: function render() {
        var _this$cardBody,
            _this = this;

        this.cardBody.classList.add("desk__card"), this.btnEdit.innerText = "Изменить", this.btnMore.innerText = "Детально", this.btnDelete.innerText = "x", this.btnEdit.classList.add("btn", "btn-card", "btn-edit"), this.btnMore.classList.add("btn", "btn-card"), this.btnDelete.classList.add("btn", "btn-card", "btn-delete");

        var e = document.createElement("h4"),
            _t2 = document.createElement("span"),
            s = document.createElement("span"),
            a = document.createElement("span"),
            n = document.createElement("span"),
            i = document.createElement("span");

        i.innerText = "\u0421\u0442\u0430\u0442\u0443\u0441: ".concat(this.visit.status), e.innerText = this.visit.doctor, _t2.innerText = "\u041A\u0440\u0430\u0442\u043A\u043E\u0435 \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435: ".concat(this.visit.description), s.innerText = "\u041F\u043E\u043B\u043D\u043E\u0435 \u0438\u043C\u044F: ".concat(this.visit.fullName), a.innerText = "\u0421\u0440\u043E\u0447\u043D\u043E\u0441\u0442\u044C: ".concat(this.visit.urgency), n.innerText = "\u041F\u0440\u0438\u0447\u0438\u043D\u0430 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0435\u0433\u043E \u0432\u0438\u0437\u0438\u0442\u0430: ".concat(this.visit.purpose), this.cardsInfo.push(e, _t2, s, a, n, i, this.btnMore, this.btnEdit, this.btnDelete), (_this$cardBody = this.cardBody).append.apply(_this$cardBody, _toConsumableArray(this.cardsInfo)), document.querySelector(".desk__card-block").append(this.cardBody), this.btnDelete.addEventListener("click", this.deleteCard.bind(this)), this.btnMore.addEventListener("click", function () {
          document.querySelector(".doctorblock") ? (_this.btnMore.innerText = "Детально", document.querySelector(".doctorblock").remove()) : (_this.showMore(), _this.btnMore.innerText = "Скрыть");
        }), this.btnEdit.addEventListener("click", function () {
          _this.editCard();
        });
      }
    }, {
      key: "showMore",
      value: function showMore() {
        var e = document.createElement("div");

        if (e.classList.add("doctorblock"), this.cardBody.append(e), "Therapist" === this.visit.doctor) {
          var _t7 = document.createElement("span");

          _t7.innerText = "\u0412\u043E\u0437\u0440\u0430\u0441\u0442: ".concat(this.visit.age, " \u043B\u0435\u0442"), e.append(_t7);
        }

        if ("Dentist" === this.visit.doctor) {
          var _t8 = document.createElement("span");

          _t8.innerText = "\u0414\u0430\u0442\u0430 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0435\u0433\u043E \u0432\u0438\u0437\u0438\u0442\u0430: ".concat(this.visit.dateOfLastVisit), e.append(_t8);
        }

        if ("Cardiologist" === this.visit.doctor) {
          var _t9 = document.createElement("span"),
              _s = document.createElement("span"),
              _a = document.createElement("span"),
              _n = document.createElement("span");

          _t9.innerText = "\u0412\u043E\u0437\u0440\u0430\u0441\u0442: ".concat(this.visit.age, " \u043B\u0435\u0442"), _s.innerText = " \u0414\u0430\u0432\u043B\u0435\u043D\u0438\u0435: ".concat(this.visit.systolicPressure, " / ").concat(this.visit.diastolicPressure, " "), _a.innerText = "\u0418\u043D\u0434\u0435\u043A\u0441 \u0442\u0435\u043B\u0430: ".concat(this.visit.bmi), _n.innerText = "\u0411\u043E\u043B\u0435\u0437\u043D\u0438 \u0412\u0421\u0414: ".concat(this.visit.cardiovascularDiseases), e.append(_t9, _s, _a, _n);
        }
      }
    }, {
      key: "deleteCard",
      value: function deleteCard() {
        var _this2 = this;

        fetch("https://ajax.test-danit.com/api/v2/cards/".concat(this.id), {
          method: "DELETE",
          headers: {
            Authorization: "Bearer ".concat(localStorage.getItem("token"))
          }
        }).then(function (e) {
          if (e.status >= 200 && e.status < 300) return e;
          {
            var _t10 = new Error(e.statusText);

            throw _t10.response = e, _t10;
          }
        }).then(function (e) {
          200 === e.status && (_this2.cardBody.remove(), _this2.btnDelete.removeEventListener("click", _this2.deleteCard));
        });
      }
    }, {
      key: "editCard",
      value: function editCard() {
        new a().renederEdit(this.visit);
      }
    }]);

    return t;
  }();

  var s = /*#__PURE__*/function () {
    function s() {
      _classCallCheck(this, s);

      this.desk = null, this.deskHeader = null, this.deskSearchInput = null, this.deskStatusFilter = null, this.deskPriorityFilter = null, this.cards = [];
    }

    _createClass(s, [{
      key: "init",
      value: function init() {
        this.createBord(), this.renderBoard(), this.search(), this.filter();
      }
    }, {
      key: "createBord",
      value: function createBord() {
        this.desk = document.createElement("div"), this.cardBlock = document.createElement("div"), this.desk.classList.add("desk"), this.cardBlock.classList.add("desk__card-block"), this.deskHeader = document.createElement("div"), this.deskHeader.classList.add("desk__desk-header"), this.deskSearchInput = document.createElement("input"), this.deskStatusFilter = document.createElement("select"), this.deskPriorityFilter = document.createElement("select"), this.deskSearchInput.setAttribute("placeholder", "Search...");
      }
    }, {
      key: "renderBoard",
      value: function renderBoard() {
        var _this3 = this;

        document.createElement("option"), ["Все", "Open", "Close"].forEach(function (e) {
          var t = document.createElement("option");
          t.innerText = e, _this3.deskStatusFilter.append(t);
        }), ["Все", "low", "middle", "high"].forEach(function (e) {
          var t = document.createElement("option");
          t.innerText = e, _this3.deskPriorityFilter.append(t);
        }), document.querySelector(".container").after(this.desk), this.deskHeader.append(this.deskSearchInput, this.deskPriorityFilter, this.deskStatusFilter), this.desk.append(this.deskHeader, this.cardBlock), this.getCards();
      }
    }, {
      key: "getCards",
      value: function getCards() {
        var _this4 = this;

        fetch("https://ajax.test-danit.com/api/v2/cards", {
          method: "GET",
          headers: {
            Authorization: "Bearer ".concat(localStorage.getItem("token"))
          }
        }).then(function (e) {
          if (e.status >= 200 && e.status < 300) return e;
          {
            var _t11 = new Error(e.statusText);

            throw _t11.response = e, _t11;
          }
        }).then(function (e) {
          return e.json();
        }).then(function (e) {
          if (e.length < 1) {
            var _e2 = document.createElement("span");

            _e2.classList.add("desk__blank-text"), _e2.innerText = "Визиты не добавлены", _this4.deskHeader.after(_e2);
          } else _this4.cards.length = 0, e.forEach(function (e) {
            _this4.cards.push(e);
          }), _this4.cards.forEach(function (e) {
            return new t(e).render();
          });
        });
      }
    }, {
      key: "search",
      value: function search() {
        var _this5 = this;

        this.deskSearchInput.onkeydown = function (e) {
          "Enter" == e.key && this.blur();
        }, this.deskSearchInput.addEventListener("blur", function () {
          _this5.clearCards();

          var e = _this5.cards.filter(function (e) {
            return e.doctor.toLowerCase().includes(_this5.deskSearchInput.value.toLowerCase()) || e.description.toLowerCase().includes(_this5.deskSearchInput.value.toLowerCase());
          });

          if (e.length < 1) {
            if (!document.querySelector(".desk__blank-text")) {
              var _e3 = document.createElement("span");

              _e3.classList.add("desk__blank-text"), _e3.innerText = "Нет совпадения", _this5.deskHeader.after(_e3);
            }
          } else e.forEach(function (e) {
            return new t(e).render();
          }), document.querySelector(".desk__blank-text").remove();
        });
      }
    }, {
      key: "clearCards",
      value: function clearCards() {
        document.querySelectorAll(".desk__card").forEach(function (e) {
          return e.remove();
        });
      }
    }, {
      key: "filter",
      value: function filter() {
        var _this6 = this;

        this.deskStatusFilter.onchange = function () {
          _this6.clearCards(), console.log(_this6.cards);

          var e = _this6.cards.filter(function (e) {
            return e.status.toLowerCase() === _this6.deskStatusFilter.value.toLowerCase();
          });

          if (e.length < 1) {
            if (!document.querySelector(".desk__blank-text")) {
              var _e4 = document.createElement("span");

              _e4.classList.add("desk__blank-text"), _e4.innerText = "Ничего не найдено", _this6.deskHeader.after(_e4);
            }
          } else e.forEach(function (e) {
            return new t(e).render();
          }), document.querySelector(".desk__blank-text").remove();

          "Все" === _this6.deskStatusFilter.value && (_this6.getCards(), document.querySelector(".desk__blank-text").remove());
        }, this.deskPriorityFilter.onchange = function () {
          _this6.clearCards();

          var e = _this6.cards.filter(function (e) {
            return e.urgency.toLowerCase() === _this6.deskPriorityFilter.value.toLowerCase();
          });

          if (e.length < 1) {
            if (!document.querySelector(".desk__blank-text")) {
              var _e5 = document.createElement("span");

              _e5.classList.add("desk__blank-text"), _e5.innerText = "Ничего не найдено", _this6.deskHeader.after(_e5);
            }
          } else e.forEach(function (e) {
            return new t(e).render();
          }), document.querySelector(".desk__blank-text").remove();

          "Все" === _this6.deskPriorityFilter.value && (_this6.getCards(), document.querySelector(".desk__blank-text").remove());
        };
      }
    }]);

    return s;
  }();

  var a = /*#__PURE__*/function () {
    function a(e, t) {
      _classCallCheck(this, a);

      this.title = e, this.body = t, this.container;
    }

    _createClass(a, [{
      key: "render",
      value: function render() {
        document.body.insertAdjacentHTML("beforeend", "\n        <div class=\"modal\" tabindex=\"-1\" id=\"myModal\">\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title\">".concat(this.title, "</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                    </div>\n                    <p class=\"invalid-message text-center text-danger mt-2 mb-0\"></p>\n                    <div class=\"modal-body\">\n                        ").concat(this.body, "\n                    </div>\n                </div>\n            </div>\n        </div>\n        ")), this.modal = new bootstrap.Modal("#myModal", {
          keyboard: !1
        }), this.modal.show(), this.modal._element.addEventListener("hidden.bs.modal", function (e) {
          return e.target.remove();
        });
      }
    }, {
      key: "close",
      value: function close() {
        this.modal.hide();
      }
    }, {
      key: "invalid",
      value: function invalid() {
        document.querySelector(".invalid-message").innerHTML = "Недійсний логін або пароль!";
      }
    }, {
      key: "renederEdit",
      value: function renederEdit(e) {
        this.render(), document.querySelector(".modal-body").innerText = "\u0412\u043D\u0435\u0441\u0456\u0442\u044C \u0437\u043C\u0456\u043D\u0438 ".concat(e.doctor), document.querySelector(".modal-title").innerText = "\u041A\u0430\u0440\u0442\u043E\u0447\u043A\u0430 \u043F\u0430\u0446\u0456\u0435\u043D\u0442\u0430 ".concat(e.fullName);

        var t = document.createElement("select"),
            _a2 = document.createElement("input"),
            n = document.createElement("input"),
            i = document.createElement("input"),
            r = document.createElement("input"),
            o = document.createElement("input"),
            d = document.createElement("input");

        ["Open", "Close"].forEach(function (e) {
          var s = document.createElement("option");
          s.setAttribute("required", !0), s.innerText = e, t.append(s);
        });
        var l = document.createElement("input"),
            c = document.createElement("textarea"),
            u = document.createElement("input"),
            m = document.createElement("input"),
            h = document.createElement("select");
        h.classList.add("modal-area__urgentlist"), ["low", "middle", "high"].forEach(function (e) {
          var t = document.createElement("option");
          t.setAttribute("required", !0), t.innerText = e, h.append(t);
        }), l.value = e.purpose, c.value = e.description, u.value = e.fullName, m.value = e.doctor;
        var v = document.createElement("div");

        if (v.classList.add("modal-area__visit-fields"), "Therapist" === e.doctor) {
          var _t12 = document.createElement("input");

          _t12.classList.add("modal-area__modalEdit-input"), _t12.value = e.age, v.append(_t12);
        }

        "Dentist" === e.doctor && (d.classList.add("modal-area__modalEdit-input"), d.setAttribute("onfocus", "this.type='date'"), d.value = e.dateOfLastVisit, v.append(d)), "Cardiologist" === e.doctor && (_a2.classList.add("modal-area__modalEdit-input"), n.classList.add("modal-area__modalEdit-input"), i.classList.add("modal-area__modalEdit-input"), o.classList.add("modal-area__modalEdit-input"), r.classList.add("modal-area__modalEdit-input"), _a2.value = e.age, n.value = e.systolicPressure, i.value = e.diastolicPressure, o.value = e.bmi, r.value = e.cardiovascularDiseases, v.append(_a2, i, n, o, r));
        var p = [l, m, c, u, h, t];
        p.forEach(function (e) {
          return e.classList.add("modal-area__modalEdit-input");
        }), v.append.apply(v, p);
        var b = document.createElement("button");
        b.classList.add("modal-area__editvisitbtn"), b.innerText = "Сохранить", this.container = document.querySelector(".modal-body"), this.container.append(v, b), b.addEventListener("click", function () {
          var v = {
            title: m.value,
            description: c.value,
            doctor: e.doctor,
            age: _a2.value,
            systolicPressure: n.value,
            diastolicPressure: i.value,
            bmi: o.value,
            cardiovascularDiseases: r.value,
            urgency: h.value,
            fullName: u.value,
            status: t.value
          },
              p = {
            title: m.value,
            description: c.value,
            doctor: e.doctor,
            lastvisit: d.value,
            urgency: h.value,
            fullName: u.value,
            visitreason: l.value,
            status: t.value
          },
              b = {
            title: m.value,
            description: c.value,
            doctor: e.doctor,
            age: _a2.value,
            urgency: h.value,
            fullName: u.value,
            visitreason: l.value,
            status: t.value
          };
          "Cardiologist" === e.doctor && fetch("https://ajax.test-danit.com/api/v2/cards/".concat(e.id), {
            method: "PUT",
            body: JSON.stringify(v),
            headers: {
              Authorization: "Bearer ".concat(localStorage.getItem("token"))
            }
          }).then(function (e) {
            if (e.status >= 200 && e.status < 300) return e;
            {
              var _t13 = new Error(e.statusText);

              throw _t13.response = e, _t13;
            }
          }).then(function (e) {
            return e.json();
          }).then(function (e) {
            "Error" === e.status ? alert(e.message) : (new s().clearCards(), new s().getCards(), document.querySelector(".btn-close").click());
          }), "Dentist" === e.doctor && fetch("https://ajax.test-danit.com/api/v2/cards/".concat(e.id), {
            method: "PUT",
            body: JSON.stringify(p),
            headers: {
              Authorization: "Bearer ".concat(localStorage.getItem("token"))
            }
          }).then(function (e) {
            if (e.status >= 200 && e.status < 300) return e;
            {
              var _t14 = new Error(e.statusText);

              throw _t14.response = e, _t14;
            }
          }).then(function (e) {
            return e.json();
          }).then(function (e) {
            "Error" === e.status ? alert(e.message) : (new s().clearCards(), new s().getCards(), document.querySelector(".btn-close").click());
          }), "Therapist" === e.doctor && fetch("https://ajax.test-danit.com/api/v2/cards/".concat(e.id), {
            method: "PUT",
            body: JSON.stringify(b),
            headers: {
              Authorization: "Bearer ".concat(localStorage.getItem("token"))
            }
          }).then(function (e) {
            if (e.status >= 200 && e.status < 300) return e;
            {
              var _t15 = new Error(e.statusText);

              throw _t15.response = e, _t15;
            }
          }).then(function (e) {
            return e.json();
          }).then(function (e) {
            "Error" === e.status ? alert(e.message) : (new s().clearCards(), new s().getCards(), document.querySelector(".btn-close").click());
          });
        });
      }
    }]);

    return a;
  }();

  var n = /*#__PURE__*/function (_a3) {
    _inherits(n, _a3);

    var _super = _createSuper(n);

    function n() {
      var _this7;

      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Введіть логін і пароль";

      _classCallCheck(this, n);

      _this7 = _super.call(this, s), _this7.email = e, _this7.password = t, _this7.body = "\n        <form id=\"login-form\">\n            <div class=\"mb-3 form-floating\">\n                <input type=\"email\" class=\"form-control\" id=\"inputEmail\" aria-describedby=\"emailHelp\" placeholder=\"name@example.com\" required value=\"".concat(_this7.email, "\">\n                <label for=\"inputEmail\" class=\"form-label\">\u0412\u0430\u0448 \u043C\u0435\u0439\u043B</label>\n            </div>\n            <div class=\"mb-3 form-floating\">\n                <input type=\"password\" class=\"form-control\" id=\"inputPassword\" value=\"").concat(_this7.password, "\" placeholder=\"password\" required autocomplete=\"on\">\n                <label for=\"inputPassword\" class=\"form-label\">\u0412\u0430\u0448 \u043F\u0430\u0440\u043E\u043B\u044C</label>\n            </div>\n            <div class=\"mb-3 d-flex justify-content-end\">\n                <button type=\"submit\" id=\"login-btn\" class=\"btn btn__login ms-3\">\u0412\u0445\u0456\u0434</button>\n            </div>\n        </form>\n        ");
      return _this7;
    }

    return _createClass(n);
  }(a);

  var i = /*#__PURE__*/function (_a4) {
    _inherits(i, _a4);

    var _super2 = _createSuper(i);

    function i() {
      var _this8;

      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "Створити візит";

      _classCallCheck(this, i);

      _this8 = _super2.call(this, e), _this8.body = '\n      <form id="newVisitForm" class="g-3 needs-validation" novalidate>\n          <div class="mb-2 col-12">\n              <select id="selectDoctor" class="form-select" aria-label="Status" name="doctor">\n                  <option selected disabled>Виберіть лікаря</option>\n                  <option value="Cardiologist">Кардіолог</option>\n                  <option value="Dentist">Стоматолог</option>\n                  <option value="Therapist">Терапевт</option>\n              </select>\n          </div>\n          <div class="row hidden" id="forAllDoctors">\n              <div class="col-md-6 col-sm-12">\n                  <div class="mb-2 form-floating">\n                      <input type="text" class="form-control" id="visitsPurpose" name="purpose" placeholder="Мета візиту" required>\n                      <label for="visitsPurpose" class="form-label">Мета візиту</label>\n                      <div class="invalid-feedback">\n                          Не може бути порожнім!\n                      </div>\n                  </div>\n                  <div class="mb-2 ">\n                      <select id="select-urgency" class="form-select" required aria-label="Urgency" name="urgency">\n                          <option value="" selected disabled>Терміновість</option>\n                          <option value="high">Високий</option>\n                          <option value="middle">Середній</option>\n                          <option value="low">Низький</option>\n                      </select>\n                      <div class="invalid-feedback">Виберіть один варіант</div>\n                  </div>\n              </div>\n              <div class="col-md-6 col-sm-12">\n                  <div class="mb-2 form-floating">\n                      <textarea class="form-control" id="shortDescription" required name="description" placeholder="Короткий опис візиту" style="height: 104px"></textarea>\n                      <label for="shortDescription" class="form-label">Короткий опис візиту</label>\n                      <div class="invalid-feedback">\n                          Не може бути порожнім!\n                      </div>\n                  </div>\n              </div>\n              <div class="col-md-12">\n                  <div class="mb-2 form-floating">\n                      <input type="text" class="form-control" id="userName" name="fullName" placeholder="Ім\'я та прізвище" required>\n                      <label for="userName" class="form-label">Ім\'я та прізвище</label>\n                      <div class="invalid-feedback">\n                          Будь-ласка, введіть своє ім\'я!\n                      </div>\n                  </div>\n              </div>\n          </div>\n          <div class="row" id="additional"></div>\n\n          <div class="mb-3 d-flex justify-content-end">\n              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Скасувати</button>\n              <button type="submit" id="create-btn" class="btn__create ms-3 hidden">Створити візит</button>\n          </div>\n      </form>\n      ';
      return _this8;
    }

    _createClass(i, [{
      key: "render",
      value: function render() {
        _get(_getPrototypeOf(i.prototype), "render", this).call(this);

        var e = document.querySelector("#newVisitForm"),
            t = e.querySelector("#forAllDoctors"),
            s = e.querySelector("#additional"),
            a = e.querySelector("#create-btn");
        e.addEventListener("change", function (n) {
          n.preventDefault(), n.target === e.querySelector("#selectDoctor") && ("Cardiologist" === n.target.value ? (t.classList.remove("hidden"), a.classList.remove("hidden"), s.innerHTML = '\n                      <div class="col-md-6 col-sm-12">\n                          <div class="mb-2 form-floating">\n                              <input type="number" required class="form-control" name="age" id="age" placeholder="Вік" min="1" max="110">\n                              <label for="age" class="form-label">Вік</label>\n                              <div class="invalid-feedback">\n                                   Введіть свій вік!\n                              </div>\n                          </div>\n                      </div>\n                      <div class="col-md-6 col-sm-12">\n                          <div class="mb-2 form-floating">\n                              <input type="number" required class="form-control" name="bmi" id="bmi" placeholder="Індекс маси тіла" min="1" max="150">\n                              <label for="bmi" class="form-label">Індекс маси тіла</label>\n                              <div class="invalid-feedback">\n                                  Введіть число!\n                              </div>\n                          </div>\n                      </div>\n                      <div class="col-12">\n                          <div class="input-group mb-2">\n                              <span class="input-group-text">Нормальний тиск</span>\n                              <input type="number" required id="Systolic" placeholder="Систолічний" name="systolicPressure" class="form-control" min="70" max="170">\n                              <input type="number" required id="Diastolic" placeholder="Діастолічний" name="diastolicPressure" class="form-control" min="50" max="110">\n                          </div>\n                      </div>\n                      <div class="col-12">\n                          <div class="mb-2 form-floating">\n                              <input type="text" required class="form-control" name="cardiovascularDiseases" id="diseases" placeholder="Cardiovascular diseases">\n                              <label for="diseases" class="form-label">Серцево-судинні захворювання</label>\n                              <div class="invalid-feedback">\n                                  Не може бути порожнім!\n                              </div>\n                          </div>\n                      </div>\n                  ') : "Dentist" === n.target.value ? (t.classList.remove("hidden"), a.classList.remove("hidden"), s.innerHTML = '\n                      <div class="col-12">\n                          <div class="mb-2 form-floating">\n                              <input type="date" required class="form-control" name="dateOfLastVisit" id="date" placeholder="Дата останнього відвідування">\n                              <label for="date" class="form-label">Дата останнього відвідування</label>\n                              <div class="invalid-feedback">\n                                  Виберіть дату!\n                              </div>\n                          </div>\n                      </div>\n                  ') : "Therapist" === n.target.value && (t.classList.remove("hidden"), a.classList.remove("hidden"), s.innerHTML = '\n                  <div class="col-12">\n                      <div class="mb-2 form-floating">\n                          <input type="number" required class="form-control" name="age" id="age" placeholder="Вік" min="1" max="110">\n                          <label for="age" class="form-label">Вік</label>\n                          <div class="invalid-feedback">\n                              Введіть свій вік\n                          </div>\n                      </div>\n                  </div>\n                  '));
        });
      }
    }]);

    return i;
  }(a);

  var r,
      o,
      d,
      l = [];
  window.addEventListener("load", function () {
    o = localStorage.getItem("token"), o && (document.querySelector("#entry-btn").classList.add("hidden"), document.querySelector("#visit-btn").classList.remove("hidden"), document.querySelector("#logout-btn").classList.remove("hidden"), l = JSON.parse(localStorage.getItem("allVisits")), new s().init());
  }), document.addEventListener("click", /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(t) {
      var _n2, _i, _a5, _t16, a;

      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(t.preventDefault(), "entry-btn" === t.target.id)) {
                _context2.next = 4;
                break;
              }

              r = new n(), r.render();
              _context2.next = 42;
              break;

            case 4:
              if (!("login-btn" === t.target.id)) {
                _context2.next = 24;
                break;
              }

              t.preventDefault();
              _n2 = document.querySelector("#inputEmail").value, _i = document.querySelector("#inputPassword").value;

              if (!(_n2.includes("@") && _i)) {
                _context2.next = 12;
                break;
              }

              _context2.next = 10;
              return function (t, s, a) {
                return e("https://ajax.test-danit.com/api/v2/cards", "/login", "POST", {
                  headers: {
                    "Content-Type": "application/json"
                  },
                  body: JSON.stringify({
                    email: "".concat(s),
                    password: "".concat(a)
                  })
                });
              }(0, _n2, _i).then(function (e) {
                e && "object" != _typeof(e) ? (localStorage.setItem("token", e), o = localStorage.getItem("token"), r.close()) : r.invalid();
              })["catch"](function (e) {
                return console.log(e.message);
              });

            case 10:
              _context2.next = 13;
              break;

            case 12:
              r.invalid();

            case 13:
              _context2.t0 = o;

              if (!_context2.t0) {
                _context2.next = 22;
                break;
              }

              document.querySelector("#entry-btn").classList.add("hidden");
              document.querySelector("#visit-btn").classList.remove("hidden");
              document.querySelector("#logout-btn").classList.remove("hidden");
              new s().init();
              document.querySelector("#sorting-form").classList.remove("hidden");
              _context2.next = 22;
              return (a = o, e.apply(void 0, ["https://ajax.test-danit.com/api/v2/cards"].concat(_arrayWithoutHoles([,,]), [{
                headers: {
                  Authorization: "Bearer ".concat(a)
                }
              }]))).then(function (e) {
                localStorage.setItem("allVisits", JSON.stringify(e)), l = JSON.parse(localStorage.getItem("allVisits"));
              });

            case 22:
              _context2.next = 42;
              break;

            case 24:
              if (!("visit-btn" === t.target.id)) {
                _context2.next = 28;
                break;
              }

              d = new i(), d.render();
              _context2.next = 42;
              break;

            case 28:
              if (!("create-btn" === t.target.id)) {
                _context2.next = 41;
                break;
              }

              t.preventDefault();
              _a5 = document.querySelector("#newVisitForm");

              if (!(_a5.classList.add("was-validated"), _a5.checkValidity())) {
                _context2.next = 39;
                break;
              }

              _t16 = function (e) {
                var t = {};

                var _iterator = _createForOfIteratorHelper(e),
                    _step;

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    var _step$value = _slicedToArray(_step.value, 2),
                        _s2 = _step$value[0],
                        _a6 = _step$value[1];

                    _a6 && (t[_s2] = _a6);
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }

                return t;
              }(new FormData(_a5));

              _t16.status = "Open";
              d.close();
              _context2.next = 37;
              return function (t, s, a) {
                return e("https://ajax.test-danit.com/api/v2/cards", "", "POST", {
                  headers: {
                    "Content-Type": "application/json",
                    Authorization: "Bearer ".concat(s)
                  },
                  body: JSON.stringify(a)
                });
              }(0, o, _t16).then(function (e) {
                l.push(e), localStorage.allVisits = JSON.stringify(l);
              });

            case 37:
              new s().clearCards();
              new s().getCards();

            case 39:
              _context2.next = 42;
              break;

            case 41:
              "logout-btn" === t.target.id ? (localStorage.clear(), location.reload()) : "showMore" === t.target.id && (t.target.closest(".visit-card").classList.toggle("card-border-radius"), t.target.closest(".visit-card").classList.toggle("card-z-index"));

            case 42:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x2) {
      return _ref2.apply(this, arguments);
    };
  }());
})();